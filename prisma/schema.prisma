// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  events       Event[]
  comments     Comment[]
  subs         Subscription[]
  refreshToken RefreshToken?

  @@map("users")
}

model RefreshToken {
  uuid   String   @id @unique @map("refresh_token")
  userId String   @unique @map("user_id")
  exp    DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Event {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  date        DateTime
  creatorId   String   @map("creator_id")

  creator  User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments Comment[]
  subs     Subscription[]

  @@map("events")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String   @map("author_id")
  eventId   String   @map("event_id")

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  event  Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Subscription {
  id      String @id @default(uuid())
  userId  String @map("user_id")
  eventId String @map("event_id")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
